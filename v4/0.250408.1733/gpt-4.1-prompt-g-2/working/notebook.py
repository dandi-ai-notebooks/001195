# %% [markdown]
# # Exploring Dandiset 001195: Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State
#
# > **AI-generated notebook**  
# > This notebook was auto-generated by an AI system and has not been fully verified by a human expert. Please proceed with caution and validate any code or conclusions before relying on them for scientific work.

# %% [markdown]
# ## Dandiset Overview
#
# - **Title:** Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State
# - **DOI:** [https://doi.org/10.48324/dandi.001195/0.250408.1733](https://doi.org/10.48324/dandi.001195/0.250408.1733)  
# - **DANDI Archive:** [https://dandiarchive.org/dandiset/001195/0.250408.1733](https://dandiarchive.org/dandiset/001195/0.250408.1733)
# - **Description:**  
#   Supporting data for the publication "Separable Dorsal Raphe Dopamine Projections Mediate the Facets of Loneliness-like State" (see DOI above). This dataset includes both in vivo calcium imaging data with supporting behavioral videos and ex vivo patch-clamp electrophysiology recordings.
# - **Keywords:** optogenetics, behavior videos, calcium imaging, electrophysiology, mouse behavior, Dorsal Raphe Nucleus (DRN), Dopamine neurons
#
# - **Access:** Open Access (CC-BY-4.0)
# - **Contributors:**  
#   Keyes, Laurel; Lee, Christopher R.; Wichmann, Romy; Matthews, Gillian A.; Tye, Kay M. and others
# - **Techniques:** voltage/current clamp, one-photon microscopy, analytical, surgical
#
# ### What this notebook covers
# - How to access and explore data from Dandiset 001195 using Python and the DANDI API
# - Loading a sample NWB file from the Dandiset and understanding its structure
# - Visualizing an example electrophysiological current clamp recording trace and stimulus
# - Providing links for further interactive exploration

# %% [markdown]
# ## Required Packages
#
# This notebook assumes the following packages are already installed:
#
# - `dandi`
# - `pynwb`
# - `remfile`
# - `h5py`
# - `matplotlib`
# - `numpy`
#
# If you do not have these packages, please install them before running the notebook.

# %%
from itertools import islice
from dandi.dandiapi import DandiAPIClient

# Connect to DANDI archive
client = DandiAPIClient()
dandiset = client.get_dandiset("001195", "0.250408.1733")

# Print basic information about the Dandiset
metadata = dandiset.get_raw_metadata()
print(f"Dandiset name: {metadata['name']}")
print(f"Dandiset URL: {metadata['url']}")

# List some assets in the Dandiset
assets = dandiset.get_assets()
print("\nFirst 5 assets:")
for asset in islice(assets, 5):
    print(f"- {asset.path} (ID: {asset.identifier})")

# %% [markdown]
# ## Loading and Exploring a Sample NWB File
#
# For illustration, we'll examine the NWB file:
#
# - **Path:** `sub-23/sub-23_ses-20150324T134114_slice-slice-1_cell-C1_icephys.nwb`
# - **URL:** https://api.dandiarchive.org/api/assets/a243dde4-c270-42a9-8550-025f5ffcd5a7/download/
#
# [Interactive preview on Neurosift (opens in browser)](https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/a243dde4-c270-42a9-8550-025f5ffcd5a7/download/&dandisetId=001195&dandisetVersion=draft)
#
# The code below shows how to access and read this file, and how to explore its contents programmatically.

# %%
import pynwb
import h5py
import remfile

nwb_url = "https://api.dandiarchive.org/api/assets/a243dde4-c270-42a9-8550-025f5ffcd5a7/download/"
remote_file = remfile.File(nwb_url)
h5_file = h5py.File(remote_file)
io = pynwb.NWBHDF5IO(file=h5_file, load_namespaces=True)
nwb = io.read()

# %% [markdown]
# ### File and Subject Metadata

# %%
print("Session description:", nwb.session_description)
print("Session start time:", nwb.session_start_time)
print("Institution:", getattr(nwb, "institution", None))
print("Lab:", getattr(nwb, "lab", None))

subj = getattr(nwb, "subject", None)
if subj:
    print("Subject ID:", getattr(subj, "subject_id", None))
    print("Species:", getattr(subj, "species", None))
    print("Strain:", getattr(subj, "strain", None))
    print("Sex:", getattr(subj, "sex", None))
    print("Age:", getattr(subj, "age", None))
    print("Description:", getattr(subj, "description", None))
else:
    print("No subject metadata found.")

# %% [markdown]
# ### NWB File Data Structure
#
# The file contains many acquisition series and stimulus protocols. Below we list the available series in these groups:

# %%
print("Available acquisition series:")
for k in nwb.acquisition.keys():
    print("-", k)

print("\nAvailable stimulus series:")
if hasattr(nwb, "stimulus"):
    for k in nwb.stimulus.keys():
        print("-", k)
else:
    print("None found.")

# %% [markdown]
# #### Summary Table of the NWB File Content

# %%
from IPython.display import Markdown, display

def list_keys_grouped(d):
    return "\n".join([f"- `{k}`" for k in d.keys()])

acq_keys = list(nwb.acquisition.keys())
stim_keys = list(nwb.stimulus.keys()) if hasattr(nwb, "stimulus") else []
summary_md = f"""
**Acquisition series (example):**
{list_keys_grouped(nwb.acquisition)}

**Stimulus series (example):**
{list_keys_grouped(nwb.stimulus) if hasattr(nwb, "stimulus") else "None"}
"""
display(Markdown(summary_md))

# %% [markdown]
# ### Visualize Example Response and Stimulus
#
# Here we load and plot the "current_clamp-response-01-ch-0" and "stimulus-01-ch-0" as a demonstration. These are typical for electrophysiology patch data.  
# Note: Only a single sweep/pair is shown for illustration.
# 

# %%
import numpy as np
import matplotlib.pyplot as plt

acq_key = "current_clamp-response-01-ch-0"
stim_key = "stimulus-01-ch-0"

if acq_key in nwb.acquisition and stim_key in nwb.stimulus:
    acq = nwb.acquisition[acq_key]
    stim = nwb.stimulus[stim_key]
    acq_data = acq.data[:]
    stim_data = stim.data[:]
    sample_rate = acq.rate
    t = np.arange(len(acq_data)) / sample_rate

    plt.figure(figsize=(10, 5))
    plt.subplot(2, 1, 1)
    plt.plot(t, acq_data * acq.conversion)
    plt.ylabel(f"Voltage ({acq.unit})")
    plt.title("Current Clamp Response (trace 01, ch 0)")

    plt.subplot(2, 1, 2)
    plt.plot(t, stim_data * stim.conversion)
    plt.ylabel(f"Injected Current ({stim.unit})")
    plt.xlabel("Time (s)")
    plt.title("Stimulus (trace 01, ch 0)")

    plt.tight_layout()
    plt.show()
else:
    print("Example series for plotting not found.")

# %% [markdown]
# #### About the Plot
#
# The top plot visualizes the cell voltage in response to a current injection, while the lower plot shows the actual stimulus waveform injected into the cell. Step responses like these are used to characterize intrinsic electrophysiological properties.  
#
# Both traces are shown in their true physical units (volts, amperes) as recorded in the NWB file.
#
# Advanced analyses may involve iterating through all sweeps, performing spike detection, or averaging sweeps, but such computations are outside the scope of this introductory exploration.

# %% [markdown]
# ## Summary and Next Steps
#
# In this notebook, we've shown:
# - How to access rich neurophysiology (intracellular) data from Dandiset 001195 using Python, the Dandi API, and NWB tools.
# - Navigation of the data structure to identify available series.
# - Visualization of a representative current clamp and stimulus trace.
#
# **Possible next steps for researchers:**
# - Systematic analysis of all sweeps and experimental conditions
# - Quantify membrane parameters or spike output
# - Explore additional NWB files in this Dandiset (see asset listing above)
# - Combine with behavior or imaging data (also present in this Dandiset)
#
# Explore interactively with neurosift: [Open in Neurosift](https://neurosift.app/nwb?url=https://api.dandiarchive.org/api/assets/a243dde4-c270-42a9-8550-025f5ffcd5a7/download/&dandisetId=001195&dandisetVersion=draft)